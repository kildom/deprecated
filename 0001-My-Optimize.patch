From 2440f73c22c2697c97cf49d05d50b3472b9f7892 Mon Sep 17 00:00:00 2001
From: aa <aa@aa.com>
Date: Tue, 4 Jun 2024 08:48:43 +0000
Subject: [PATCH 1/2] My Optimize

---
 build/moz.configure/lto-pgo.configure        | 12 ++++++------
 gfx/wr/Cargo.toml                            |  4 ++--
 js/src/gc/Zone.cpp                           |  6 ++++++
 js/src/gc/Zone.h                             |  2 ++
 js/src/js-config.mozbuild                    |  6 +++---
 js/src/jsapi-tests/moz.build                 |  6 +++---
 js/src/vm/BytecodeUtil.cpp                   |  8 ++++++++
 js/src/vm/CodeCoverage.cpp                   |  4 ++++
 js/src/vm/CodeCoverage.h                     | 14 ++++++++++++++
 js/src/vm/JSScript.cpp                       |  4 ++++
 js/src/vm/JSScript.h                         | 10 ++++++++++
 js/src/vm/Realm.cpp                          |  4 ++++
 js/src/vm/Realm.h                            |  6 ++++++
 js/src/vm/Runtime.h                          |  4 ++++
 third_party/rust/ahash/.cargo-checksum.json  |  2 +-
 third_party/rust/ahash/Cargo.toml            |  6 +++---
 third_party/rust/base64/Cargo.toml           |  2 +-
 third_party/rust/byteorder/Cargo.toml        |  2 +-
 third_party/rust/clap/Cargo.toml             |  2 +-
 third_party/rust/httparse/Cargo.toml         |  2 +-
 third_party/rust/memchr/.cargo-checksum.json |  2 +-
 third_party/rust/memchr/Cargo.toml           |  2 +-
 third_party/rust/regex/Cargo.toml            |  4 ++--
 third_party/rust/siphasher/Cargo.toml        |  2 +-
 24 files changed, 89 insertions(+), 27 deletions(-)

diff --git a/build/moz.configure/lto-pgo.configure b/build/moz.configure/lto-pgo.configure
index 5048b367e2686..ad62291b98fec 100644
--- a/build/moz.configure/lto-pgo.configure
+++ b/build/moz.configure/lto-pgo.configure
@@ -396,8 +396,8 @@ def lto(
         ldflags.append("-mllvm:-import-instr-limit=10")
     elif target.kernel == "Darwin":
         ldflags.append("-Wl,-mllvm,-import-instr-limit=10")
-    elif c_compiler.type == "clang":
-        ldflags.append("-Wl,-plugin-opt=-import-instr-limit=10")
+    #elif c_compiler.type == "clang":
+    #    ldflags.append("-Wl,-plugin-opt=-import-instr-limit=10")
 
     # If we're using the new pass manager, we can also enable the new PM
     # during LTO. Further we can use the resulting size savings to increase
@@ -410,10 +410,10 @@ def lto(
                 ldflags.append("-mllvm:-import-hot-multiplier=30")
         elif target.kernel == "Darwin":
             ldflags.append("-Wl,-mllvm,-import-hot-multiplier=30")
-        else:
-            if c_compiler.version < "13.0.0":
-                ldflags.append("-Wl,-plugin-opt=new-pass-manager")
-            ldflags.append("-Wl,-plugin-opt=-import-hot-multiplier=30")
+        #else:
+        #    if c_compiler.version < "13.0.0":
+        #        ldflags.append("-Wl,-plugin-opt=new-pass-manager")
+        #    ldflags.append("-Wl,-plugin-opt=-import-hot-multiplier=30")
 
     # Pick Rust LTO mode in case of cross lTO. Thin is the default.
     if "cross" in values:
diff --git a/gfx/wr/Cargo.toml b/gfx/wr/Cargo.toml
index 6be188c09cebc..36c9b793702e7 100644
--- a/gfx/wr/Cargo.toml
+++ b/gfx/wr/Cargo.toml
@@ -16,10 +16,10 @@ panic = "abort"
 
 # optimizing glsl more makes a big difference in swgl build times
 [profile.dev.package.glsl]
-opt-level = 2
+opt-level = "z"
 
 [profile.release.package.glsl]
-opt-level = 2
+opt-level = "z"
 
 [patch.crates-io]
 firefox-on-glean = { path = "fog" }
diff --git a/js/src/gc/Zone.cpp b/js/src/gc/Zone.cpp
index 13324d7e43663..c24519c9e4bf7 100644
--- a/js/src/gc/Zone.cpp
+++ b/js/src/gc/Zone.cpp
@@ -838,9 +838,11 @@ void Zone::fixupScriptMapsAfterMovingGC(JSTracer* trc) {
     scriptCountsMap->traceWeak(trc);
   }
 
+#ifdef INCLUDE_COV
   if (scriptLCovMap) {
     scriptLCovMap->traceWeak(trc);
   }
+#endif
 
 #ifdef MOZ_VTUNE
   if (scriptVTuneIdMap) {
@@ -867,6 +869,7 @@ void Zone::checkScriptMapsAfterMovingGC() {
     });
   }
 
+#ifdef INCLUDE_COV
   if (scriptLCovMap) {
     CheckTableAfterMovingGC(*scriptLCovMap, [this](const auto& entry) {
       BaseScript* script = entry.key();
@@ -874,6 +877,7 @@ void Zone::checkScriptMapsAfterMovingGC() {
       return script;
     });
   }
+#endif
 
 #  ifdef MOZ_VTUNE
   if (scriptVTuneIdMap) {
@@ -922,6 +926,7 @@ void Zone::clearScriptCounts(Realm* realm) {
 }
 
 void Zone::clearScriptLCov(Realm* realm) {
+#ifdef INCLUDE_COV
   if (!scriptLCovMap) {
     return;
   }
@@ -932,6 +937,7 @@ void Zone::clearScriptLCov(Realm* realm) {
       i.remove();
     }
   }
+#endif
 }
 
 void Zone::clearRootsForShutdownGC() {
diff --git a/js/src/gc/Zone.h b/js/src/gc/Zone.h
index 60f5cbeee9da9..14c92c8f64427 100644
--- a/js/src/gc/Zone.h
+++ b/js/src/gc/Zone.h
@@ -429,7 +429,9 @@ class Zone : public js::ZoneAllocator, public js::gc::GraphNodeBase<JS::Zone> {
   // 1568245; this change in 1575350). The tables are initialized lazily by
   // JSScript.
   js::UniquePtr<js::ScriptCountsMap> scriptCountsMap;
+#ifdef INCLUDE_COV
   js::UniquePtr<js::ScriptLCovMap> scriptLCovMap;
+#endif
   js::MainThreadData<js::DebugScriptMap*> debugScriptMap;
 #ifdef MOZ_VTUNE
   js::UniquePtr<js::ScriptVTuneIdMap> scriptVTuneIdMap;
diff --git a/js/src/js-config.mozbuild b/js/src/js-config.mozbuild
index 06d1357805f9b..3524769df7c5b 100644
--- a/js/src/js-config.mozbuild
+++ b/js/src/js-config.mozbuild
@@ -15,9 +15,9 @@ if (
 
 # Enables CACHEIR_LOGS to diagnose IC coverage, and
 # Structured spewer for diagnostics
-if CONFIG["MOZ_DEBUG"] or CONFIG["NIGHTLY_BUILD"]:
-    DEFINES["JS_CACHEIR_SPEW"] = True
-    DEFINES["JS_STRUCTURED_SPEW"] = True
+#if CONFIG["MOZ_DEBUG"] or CONFIG["NIGHTLY_BUILD"]:
+    #DEFINES["JS_CACHEIR_SPEW"] = True
+    #DEFINES["JS_STRUCTURED_SPEW"] = True
 
 # CTypes
 if CONFIG["JS_HAS_CTYPES"]:
diff --git a/js/src/jsapi-tests/moz.build b/js/src/jsapi-tests/moz.build
index ac9afbe814ec5..c61c118ef9813 100644
--- a/js/src/jsapi-tests/moz.build
+++ b/js/src/jsapi-tests/moz.build
@@ -185,9 +185,9 @@ if CONFIG["OS_ARCH"] not in ("WINNT", "Darwin") and CONFIG["OS_TARGET"] != "Andr
         "testPrintError.cpp",
     ]
 
-if CONFIG["MOZ_DEBUG"] or CONFIG["NIGHTLY_BUILD"]:
-    DEFINES["JS_CACHEIR_SPEW"] = True
-    DEFINES["JS_STRUCTURED_SPEW"] = True
+#if CONFIG["MOZ_DEBUG"] or CONFIG["NIGHTLY_BUILD"]:
+    #DEFINES["JS_CACHEIR_SPEW"] = True
+    #DEFINES["JS_STRUCTURED_SPEW"] = True
 
 DEFINES["EXPORT_JS_API"] = True
 
diff --git a/js/src/vm/BytecodeUtil.cpp b/js/src/vm/BytecodeUtil.cpp
index 82b21cb508824..ccb4d56e8008d 100644
--- a/js/src/vm/BytecodeUtil.cpp
+++ b/js/src/vm/BytecodeUtil.cpp
@@ -2895,6 +2895,8 @@ struct CollectedScripts {
   }
 };
 
+#ifdef INCLUDE_COV
+
 static bool GenerateLcovInfo(JSContext* cx, JS::Realm* realm,
                              GenericPrinter& out) {
   AutoRealmUnchecked ar(cx, realm);
@@ -2991,6 +2993,8 @@ static bool GenerateLcovInfo(JSContext* cx, JS::Realm* realm,
   return true;
 }
 
+#endif
+
 JS_PUBLIC_API UniqueChars js::GetCodeCoverageSummaryAll(JSContext* cx,
                                                         size_t* length) {
   Sprinter out(cx);
@@ -2998,11 +3002,13 @@ JS_PUBLIC_API UniqueChars js::GetCodeCoverageSummaryAll(JSContext* cx,
     return nullptr;
   }
 
+#ifdef INCLUDE_COV
   for (RealmsIter realm(cx->runtime()); !realm.done(); realm.next()) {
     if (!GenerateLcovInfo(cx, realm, out)) {
       return nullptr;
     }
   }
+#endif
 
   *length = out.length();
   return out.release();
@@ -3015,9 +3021,11 @@ JS_PUBLIC_API UniqueChars js::GetCodeCoverageSummary(JSContext* cx,
     return nullptr;
   }
 
+#ifdef INCLUDE_COV
   if (!GenerateLcovInfo(cx, cx->realm(), out)) {
     return nullptr;
   }
+#endif
 
   *length = out.length();
   return out.release();
diff --git a/js/src/vm/CodeCoverage.cpp b/js/src/vm/CodeCoverage.cpp
index 2a8c81215ab00..67940e423b739 100644
--- a/js/src/vm/CodeCoverage.cpp
+++ b/js/src/vm/CodeCoverage.cpp
@@ -60,6 +60,8 @@
 namespace js {
 namespace coverage {
 
+#ifdef INCLUDE_COV
+
 LCovSource::LCovSource(LifoAlloc* alloc, UniqueChars name)
     : name_(std::move(name)),
       outFN_(alloc),
@@ -673,5 +675,7 @@ bool CollectScriptCoverage(JSScript* script, bool finalizing) {
   return !source->hadOutOfMemory();
 }
 
+#endif
+
 }  // namespace coverage
 }  // namespace js
diff --git a/js/src/vm/CodeCoverage.h b/js/src/vm/CodeCoverage.h
index 6ebfee6b132fd..62451990bdd6c 100644
--- a/js/src/vm/CodeCoverage.h
+++ b/js/src/vm/CodeCoverage.h
@@ -20,6 +20,8 @@
 namespace js {
 namespace coverage {
 
+#ifdef INCLUDE_COV
+
 class LCovSource {
  public:
   LCovSource(LifoAlloc* alloc, JS::UniqueChars name);
@@ -166,6 +168,18 @@ bool InitScriptCoverage(JSContext* cx, JSScript* script);
 // Collect the code-coverage data from a script into relevant LCovSource.
 bool CollectScriptCoverage(JSScript* script, bool finalizing);
 
+#else
+
+static inline void InitLCov() {}
+
+static inline void EnableLCov() {}
+
+inline bool IsLCovEnabled() {
+  return false;
+}
+
+#endif
+
 }  // namespace coverage
 }  // namespace js
 
diff --git a/js/src/vm/JSScript.cpp b/js/src/vm/JSScript.cpp
index 7c3ed975a035d..49fac5803ec49 100644
--- a/js/src/vm/JSScript.cpp
+++ b/js/src/vm/JSScript.cpp
@@ -132,9 +132,11 @@ void js::BaseScript::finalize(JS::GCContext* gcx) {
   if (hasBytecode()) {
     JSScript* script = this->asJSScript();
 
+#ifdef INCLUDE_COV
     if (coverage::IsLCovEnabled()) {
       coverage::CollectScriptCoverage(script, true);
     }
+#endif
 
     script->destroyScriptCounts();
   }
@@ -2499,11 +2501,13 @@ bool JSScript::fullyInitFromStencil(
   script->assertValidJumpTargets();
 #endif
 
+#ifdef INCLUDE_COV
   if (coverage::IsLCovEnabled()) {
     if (!coverage::InitScriptCoverage(cx, script)) {
       return false;
     }
   }
+#endif
 
   return true;
 }
diff --git a/js/src/vm/JSScript.h b/js/src/vm/JSScript.h
index c46ff65d2d5de..50439a2a52343 100644
--- a/js/src/vm/JSScript.h
+++ b/js/src/vm/JSScript.h
@@ -59,10 +59,14 @@ class LexicalScope;
 
 class JS_PUBLIC_API Sprinter;
 
+#ifdef INCLUDE_COV
+
 namespace coverage {
 class LCovSource;
 }  // namespace coverage
 
+#endif
+
 namespace gc {
 class AllocSite;
 }  // namespace gc
@@ -172,19 +176,23 @@ using ScriptCountsMap =
     GCRekeyableHashMap<HeapPtr<BaseScript*>, UniqueScriptCounts,
                        DefaultHasher<HeapPtr<BaseScript*>>, SystemAllocPolicy>;
 
+#ifdef INCLUDE_COV
 // The 'const char*' for the function name is a pointer within the LCovSource's
 // LifoAlloc and will be discarded at the same time.
 using ScriptLCovEntry = std::tuple<coverage::LCovSource*, const char*>;
 using ScriptLCovMap =
     GCRekeyableHashMap<HeapPtr<BaseScript*>, ScriptLCovEntry,
                        DefaultHasher<HeapPtr<BaseScript*>>, SystemAllocPolicy>;
+#endif
 
 #ifdef MOZ_VTUNE
+#error Disable MOZ_VTUNE
 using ScriptVTuneIdMap =
     GCRekeyableHashMap<HeapPtr<BaseScript*>, uint32_t,
                        DefaultHasher<HeapPtr<BaseScript*>>, SystemAllocPolicy>;
 #endif
 #ifdef JS_CACHEIR_SPEW
+#error Disable JS_CACHEIR_SPEW
 using ScriptFinalWarmUpCountEntry = std::tuple<uint32_t, SharedImmutableString>;
 using ScriptFinalWarmUpCountMap =
     GCRekeyableHashMap<HeapPtr<BaseScript*>, ScriptFinalWarmUpCountEntry,
@@ -2293,9 +2301,11 @@ void FillImmutableFlagsFromCompileOptionsForFunction(
 
 namespace JS {
 
+#ifdef INCLUDE_COV
 template <>
 struct GCPolicy<js::ScriptLCovEntry>
     : public IgnoreGCPolicy<js::ScriptLCovEntry> {};
+#endif
 
 #ifdef JS_CACHEIR_SPEW
 template <>
diff --git a/js/src/vm/Realm.cpp b/js/src/vm/Realm.cpp
index 4e3eba5677f4c..0fff71ee7dca9 100644
--- a/js/src/vm/Realm.cpp
+++ b/js/src/vm/Realm.cpp
@@ -61,10 +61,12 @@ Realm::~Realm() {
   MOZ_ASSERT(!hasBeenEnteredIgnoringJit());
   MOZ_ASSERT(!isDebuggee());
 
+#ifdef INCLUDE_COV
   // Write the code coverage information in a file.
   if (lcovRealm_) {
     runtime_->lcovOutput().writeLCovResult(*lcovRealm_);
   }
+#endif
 
   if (allocationMetadataBuilder_) {
     forgetAllocationMetadataBuilder();
@@ -483,12 +485,14 @@ void Realm::updateDebuggerObservesCoverage() {
   clearScriptLCov();
 }
 
+#ifdef INCLUDE_COV
 coverage::LCovRealm* Realm::lcovRealm() {
   if (!lcovRealm_) {
     lcovRealm_ = js::MakeUnique<coverage::LCovRealm>(this);
   }
   return lcovRealm_.get();
 }
+#endif
 
 bool Realm::collectCoverageForDebug() const {
   return debuggerObservesCoverage() || coverage::IsLCovEnabled();
diff --git a/js/src/vm/Realm.h b/js/src/vm/Realm.h
index 4518b4ced46ab..a1f1ff922e751 100644
--- a/js/src/vm/Realm.h
+++ b/js/src/vm/Realm.h
@@ -34,9 +34,11 @@
 
 namespace js {
 
+#ifdef INCLUDE_COV
 namespace coverage {
 class LCovRealm;
 }  // namespace coverage
+#endif
 
 class AutoRestoreRealmDebugMode;
 class Debugger;
@@ -378,7 +380,9 @@ class JS::Realm : public JS::shadow::Realm {
   bool allocatedDuringIncrementalGC_;
   bool initializingGlobal_ = true;
 
+#ifdef INCLUDE_COV
   js::UniquePtr<js::coverage::LCovRealm> lcovRealm_ = nullptr;
+#endif
 
  public:
   // WebAssembly state for the realm.
@@ -739,8 +743,10 @@ class JS::Realm : public JS::shadow::Realm {
   // realm or if the process-wide LCov option is enabled.
   bool collectCoverageForDebug() const;
 
+#ifdef INCLUDE_COV
   // Get or allocate the associated LCovRealm.
   js::coverage::LCovRealm* lcovRealm();
+#endif
 
   bool shouldCaptureStackForThrow();
 
diff --git a/js/src/vm/Runtime.h b/js/src/vm/Runtime.h
index 57d4fb1411891..338ac85a51cb3 100644
--- a/js/src/vm/Runtime.h
+++ b/js/src/vm/Runtime.h
@@ -675,8 +675,10 @@ struct JSRuntime {
   js::MainThreadData<js::UniquePtr<RootedPlainObjVec>> watchtowerTestingLog;
 
  private:
+#ifdef INCLUDE_COV
   /* Code coverage output. */
   js::UnprotectedData<js::coverage::LCovRuntime> lcovOutput_;
+#endif
 
   /* Functions to call, together with data, when the runtime is being torn down.
    */
@@ -684,7 +686,9 @@ struct JSRuntime {
       cleanupClosures;
 
  public:
+#ifdef INCLUDE_COV
   js::coverage::LCovRuntime& lcovOutput() { return lcovOutput_.ref(); }
+#endif
 
   /* Register a cleanup function to be called during runtime shutdown. Do not
    * depend on the ordering of cleanup calls. */
diff --git a/third_party/rust/ahash/.cargo-checksum.json b/third_party/rust/ahash/.cargo-checksum.json
index f72f808ffccd0..6e099d5ce58ea 100644
--- a/third_party/rust/ahash/.cargo-checksum.json
+++ b/third_party/rust/ahash/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"ddcbd9309cebf3ffd26f87e09bb8f971793535955ebfd9a7196eba31a53471f8","FAQ.md":"9eb41898523ee209a0a937f9bcb78afe45ad55ca0556f8a4d4063558098f6d1e","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"0444c6991eead6822f7b9102e654448d51624431119546492e8b231db42c48bb","README.md":"d7f74d616a751bcca23d5d3b58a6daf556356a526c5f0b6aa0504715d176549a","build.rs":"23cbf4cf1b742e2c4da8bc58d06d1d021479dec80cec6a0bc3704c7172e2864a","rustfmt.toml":"e090969e99df9360705680cc0097cfaddae10c22dc2e01470592cf3b9787fd36","src/aes_hash.rs":"013602aec42150e59ba9ed6135525a624a4b42c1b1328b9857ec238aa12c3178","src/convert.rs":"54e49f93d51665366923d4d815cfd67790d3c769e84ab4386ba97f928d17d1bd","src/fallback_hash.rs":"a82451f6458a6e7a7e7da82a3c982e9bb825a2092ab79c41459d8011775fb0b1","src/hash_map.rs":"5ee97baa64fa528ba9c01bd018332c4974846c4813c6f8c30cee9f3546598f1c","src/hash_quality_test.rs":"1a560a181a804791bc6ad797df5352cdd87123fed7f19f659de0c2d883248bed","src/hash_set.rs":"360e55d066b44624f06e49efa140c03fda635fb17a59622cc29a83830bd1f263","src/lib.rs":"e2f4e7bfcf2807c73e3b8d3b1bd83c6789313b6b55edd59e15e04146e55e01b6","src/operations.rs":"38ed2b48a13d826c48ede5f304c9c2572c0c8f64ac8ac5a1ed4e112e536f3a97","src/random_state.rs":"03f40a654cfca2e00a2dabd21c85368ee50b8b6289efe98ea1745b25c721b9c6","src/specialize.rs":"56354db8a0f7e6ee1340a08f2ab6f79a0ff439fd61badac5e7e59fe4f4a653ba","tests/bench.rs":"7a425f564201560f9a8fb6c77f91f29bb88ec815b10bd27d15740c922a4f928e","tests/map_tests.rs":"e56b6f700e3b1176210e4b266d7a42b3263e966e5e565d53b1bc27af7a87168e","tests/nopanic.rs":"0d28a46248d77283941db1d9fd154c68b965c81a0e3db1fe4a43e06fc448da8f"},"package":"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011"}
\ No newline at end of file
+{"files":{"Cargo.toml":"0f47af16323d4153cc47461924c0440c57d3835a874ca79964694646d5c2d671","FAQ.md":"9eb41898523ee209a0a937f9bcb78afe45ad55ca0556f8a4d4063558098f6d1e","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"0444c6991eead6822f7b9102e654448d51624431119546492e8b231db42c48bb","README.md":"d7f74d616a751bcca23d5d3b58a6daf556356a526c5f0b6aa0504715d176549a","build.rs":"23cbf4cf1b742e2c4da8bc58d06d1d021479dec80cec6a0bc3704c7172e2864a","rustfmt.toml":"e090969e99df9360705680cc0097cfaddae10c22dc2e01470592cf3b9787fd36","src/aes_hash.rs":"013602aec42150e59ba9ed6135525a624a4b42c1b1328b9857ec238aa12c3178","src/convert.rs":"54e49f93d51665366923d4d815cfd67790d3c769e84ab4386ba97f928d17d1bd","src/fallback_hash.rs":"a82451f6458a6e7a7e7da82a3c982e9bb825a2092ab79c41459d8011775fb0b1","src/hash_map.rs":"5ee97baa64fa528ba9c01bd018332c4974846c4813c6f8c30cee9f3546598f1c","src/hash_quality_test.rs":"1a560a181a804791bc6ad797df5352cdd87123fed7f19f659de0c2d883248bed","src/hash_set.rs":"360e55d066b44624f06e49efa140c03fda635fb17a59622cc29a83830bd1f263","src/lib.rs":"e2f4e7bfcf2807c73e3b8d3b1bd83c6789313b6b55edd59e15e04146e55e01b6","src/operations.rs":"38ed2b48a13d826c48ede5f304c9c2572c0c8f64ac8ac5a1ed4e112e536f3a97","src/random_state.rs":"03f40a654cfca2e00a2dabd21c85368ee50b8b6289efe98ea1745b25c721b9c6","src/specialize.rs":"56354db8a0f7e6ee1340a08f2ab6f79a0ff439fd61badac5e7e59fe4f4a653ba","tests/bench.rs":"7a425f564201560f9a8fb6c77f91f29bb88ec815b10bd27d15740c922a4f928e","tests/map_tests.rs":"e56b6f700e3b1176210e4b266d7a42b3263e966e5e565d53b1bc27af7a87168e","tests/nopanic.rs":"0d28a46248d77283941db1d9fd154c68b965c81a0e3db1fe4a43e06fc448da8f"},"package":"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011"}
\ No newline at end of file
diff --git a/third_party/rust/ahash/Cargo.toml b/third_party/rust/ahash/Cargo.toml
index 279954f9a7581..cd7d3af0f8e2a 100644
--- a/third_party/rust/ahash/Cargo.toml
+++ b/third_party/rust/ahash/Cargo.toml
@@ -50,21 +50,21 @@ rustdoc-args = [
 ]
 
 [profile.bench]
-opt-level = 3
+opt-level = "z"
 lto = "fat"
 codegen-units = 1
 debug = 0
 debug-assertions = false
 
 [profile.release]
-opt-level = 3
+opt-level = "z"
 lto = "fat"
 codegen-units = 1
 debug = 0
 debug-assertions = false
 
 [profile.test]
-opt-level = 2
+opt-level = "z"
 lto = "fat"
 
 [lib]
diff --git a/third_party/rust/base64/Cargo.toml b/third_party/rust/base64/Cargo.toml
index c551663d43e9d..7264d41cc2eb6 100644
--- a/third_party/rust/base64/Cargo.toml
+++ b/third_party/rust/base64/Cargo.toml
@@ -39,7 +39,7 @@ rustdoc-args = ["--generate-link-to-definition"]
 debug = 2
 
 [profile.test]
-opt-level = 3
+opt-level = "z"
 
 [[bench]]
 name = "benchmarks"
diff --git a/third_party/rust/byteorder/Cargo.toml b/third_party/rust/byteorder/Cargo.toml
index da515d9d900a1..375dbd2aca9b3 100644
--- a/third_party/rust/byteorder/Cargo.toml
+++ b/third_party/rust/byteorder/Cargo.toml
@@ -35,7 +35,7 @@ license = "Unlicense OR MIT"
 repository = "https://github.com/BurntSushi/byteorder"
 
 [profile.bench]
-opt-level = 3
+opt-level = "z"
 
 [lib]
 name = "byteorder"
diff --git a/third_party/rust/clap/Cargo.toml b/third_party/rust/clap/Cargo.toml
index 19de2fe6f3bbe..6354324c5df67 100644
--- a/third_party/rust/clap/Cargo.toml
+++ b/third_party/rust/clap/Cargo.toml
@@ -105,7 +105,7 @@ lto = true
 codegen-units = 1
 
 [profile.test]
-opt-level = 1
+opt-level = "z"
 
 [lib]
 bench = false
diff --git a/third_party/rust/httparse/Cargo.toml b/third_party/rust/httparse/Cargo.toml
index 610e371334123..3610bc8c8f295 100644
--- a/third_party/rust/httparse/Cargo.toml
+++ b/third_party/rust/httparse/Cargo.toml
@@ -33,7 +33,7 @@ license = "MIT/Apache-2.0"
 repository = "https://github.com/seanmonstar/httparse"
 
 [profile.bench]
-opt-level = 3
+opt-level = "z"
 lto = true
 codegen-units = 1
 
diff --git a/third_party/rust/memchr/.cargo-checksum.json b/third_party/rust/memchr/.cargo-checksum.json
index f496380224b5a..eeb5968c31310 100644
--- a/third_party/rust/memchr/.cargo-checksum.json
+++ b/third_party/rust/memchr/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"COPYING":"01c266bced4a434da0051174d6bee16a4c82cf634e2679b6155d40d75012390f","Cargo.toml":"fdeda7d32fa12e4a1589d13c74ae5fd4f1065d0219ba73f8492e28248d84d146","LICENSE-MIT":"0f96a83840e146e43c0ec96a22ec1f392e0680e6c1226e6f3ba87e0740af850f","README.md":"51d941627e004588863b137918e908e34c4d599d12e03afd3e489e2bb61e3704","UNLICENSE":"7e12e5df4bae12cb21581ba157ced20e1986a0508dd10d0e8a4ab9a4cf94e85c","build.rs":"5638d9b60d40f44db96767ce32246de42158571364cce92531a85307ac7eda6c","rustfmt.toml":"1ca600239a27401c4a43f363cf3f38183a212affc1f31bff3ae93234bbaec228","scripts/make-byte-frequency-table":"21d1ded41fe5a780507bb88e1910d471b4081cc626a48891a408712e45b7b2bf","src/cow.rs":"a23c3b009e5215b5c3ac46627a5dd844235bef0136d76b3fc1eeeb744565c125","src/lib.rs":"9430cd37b13399df8f8c27a752ccdf6422a563e24171d1b4802424f9193a8f37","src/memchr/c.rs":"34f7caf79316f4b03908832fdbd4aff367f2bc30eae291478cc5a0a108ce6e76","src/memchr/fallback.rs":"48764f18b7ff1f00a9ac1c4ed8ec96ad11f7b09b2d062a8ed3fe81160add627d","src/memchr/iter.rs":"61463e7fa22ca8f212c2cbfb882af0c87b0fb1bc6b4676678a4822a581ec1037","src/memchr/mod.rs":"d5bfc881c7c089e1a0825209a4d21c3f792f38c6f16f3bc715d0d539477376b6","src/memchr/naive.rs":"c7453bc99cc4e58eb37cf5a50c88688833e50a270ee1849baefddb8acc0ccd94","src/memchr/x86/avx.rs":"3c2750174ce7ff033daa4096e7961bbee9a2da898068266b27dee22ef8cfddad","src/memchr/x86/mod.rs":"a642d5aefdb7452ead4ab7946b5c6cfb6cc6df636dcd0ebbd6f5e6e1ac8305c0","src/memchr/x86/sse2.rs":"79ede1aba71a655e86eb5873d682c5da26933bffa4fffd7042a2313f18cf4675","src/memchr/x86/sse42.rs":"de4c6f354dbfec170876cddb8d9157b35928f96ed2339a0c5d094cc953a2f52d","src/memmem/byte_frequencies.rs":"2fb85b381c038c1e44ce94294531cdcd339dca48b1e61f41455666e802cbbc9e","src/memmem/genericsimd.rs":"9ce7283db0994438eb6df2bea6ad984e80512b6f643ebae7ae7d82eb5d39fa11","src/memmem/mod.rs":"949fb8e11a23030d59b34fd8c7c196150f133e909a8448705c77a751c436907d","src/memmem/prefilter/fallback.rs":"d32248c41aa09701c2410c52f948bbe009dd1b13a01b444ce0fb8c4b4e404ede","src/memmem/prefilter/genericsimd.rs":"57d5523cf0299b37ef1dd1b351e3d387d5070f2f7ecffc9a9ca66528101ebd3f","src/memmem/prefilter/mod.rs":"ad8b4ac72c025f11d6b641c5fc0888468112758dcdc6bb72b43f932d2005ea4e","src/memmem/prefilter/wasm.rs":"14f684412fca35445a94760a6973d772dfd22d329ebae3b52b525d2a1f3acd63","src/memmem/prefilter/x86/avx.rs":"e344cae36a88b59c07a1c1d395edeb9c636a399e1528ce69b2bc7c94d8d8bb0b","src/memmem/prefilter/x86/mod.rs":"df2d84b23b22574383c281d33671a121b5faf7b1a48dd6f67c3085cd02cd4498","src/memmem/prefilter/x86/sse.rs":"daa648fc2a90d37299803a80d632e8a47a30ce8719d0ac2a2ea2cde3b30b6fef","src/memmem/rabinkarp.rs":"9b44eb092524a51792eba4deaca6c6d3cbc51db98cb548ea4fa7e5d8988cc71a","src/memmem/rarebytes.rs":"571082c71fc3dca5e4304171d41fb3c44e241df6dcd88bac4d7a15b52f9521e0","src/memmem/twoway.rs":"102f8bbb29696d5656cd2f5a1769a3af96d044fb09972881455cfb6424d6b50a","src/memmem/util.rs":"0194d40b912137e2352863af9cc1c0273baf97fdf6b27799628680846c06febd","src/memmem/vector.rs":"96e6f45f8ad11a822c4f18393839225d7f40f898ad657e109ba1b3288af0ef8f","src/memmem/wasm.rs":"87da03c964f054db30cc972d07a74e8902ec1248e2338ecd1dbac430f43fffc2","src/memmem/x86/avx.rs":"de85dbc415603c844baf94fbc92d676a738dd4b99246be468bd5f7be5921b25f","src/memmem/x86/mod.rs":"5012fca41b91caf229278aa221e8dd514ede497fe4938d64562d03fef2fc46e6","src/memmem/x86/sse.rs":"148a40c0952aca8b16d9eb3e724a5b9b60693bc7b2bcc5209bcc43c94faf560a","src/tests/memchr/iter.rs":"b68c7ecdb6222c5dbf61212e6863f78f98ad343868a74cb8612692fc790240b2","src/tests/memchr/memchr.rs":"09589c5899324c9b26ea4513c80389a2ffdf6ddc460031e2ca8da43bd493ae3f","src/tests/memchr/mod.rs":"29e0855f946c7babf603b3d610a29235a56a26a4c867fef0768542388eac4c95","src/tests/memchr/simple.rs":"b9997903ede972272c01c1750522a20692a28488cc7c5cf745ea83ff96d65fe3","src/tests/memchr/testdata.rs":"3e34377fe60eca3687d1ebc66127bd631af27ceaccc8f08806a293199b69a83f","src/tests/mod.rs":"9054a2a2f9af140f305ca29155d942fafbac9fb0874067611adc8a5990546be4","src/tests/x86_64-soft_float.json":"c0e416487fe9b4809534edb7db2a9eff3453dc40d9f1e23362c37f45a77ec717"},"package":"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"}
\ No newline at end of file
+{"files":{"COPYING":"01c266bced4a434da0051174d6bee16a4c82cf634e2679b6155d40d75012390f","Cargo.toml":"5133c5336c4ad1eb3d92c923564de8268e34e96418fca15e784099b56f4e2263","LICENSE-MIT":"0f96a83840e146e43c0ec96a22ec1f392e0680e6c1226e6f3ba87e0740af850f","README.md":"51d941627e004588863b137918e908e34c4d599d12e03afd3e489e2bb61e3704","UNLICENSE":"7e12e5df4bae12cb21581ba157ced20e1986a0508dd10d0e8a4ab9a4cf94e85c","build.rs":"5638d9b60d40f44db96767ce32246de42158571364cce92531a85307ac7eda6c","rustfmt.toml":"1ca600239a27401c4a43f363cf3f38183a212affc1f31bff3ae93234bbaec228","scripts/make-byte-frequency-table":"21d1ded41fe5a780507bb88e1910d471b4081cc626a48891a408712e45b7b2bf","src/cow.rs":"a23c3b009e5215b5c3ac46627a5dd844235bef0136d76b3fc1eeeb744565c125","src/lib.rs":"9430cd37b13399df8f8c27a752ccdf6422a563e24171d1b4802424f9193a8f37","src/memchr/c.rs":"34f7caf79316f4b03908832fdbd4aff367f2bc30eae291478cc5a0a108ce6e76","src/memchr/fallback.rs":"48764f18b7ff1f00a9ac1c4ed8ec96ad11f7b09b2d062a8ed3fe81160add627d","src/memchr/iter.rs":"61463e7fa22ca8f212c2cbfb882af0c87b0fb1bc6b4676678a4822a581ec1037","src/memchr/mod.rs":"d5bfc881c7c089e1a0825209a4d21c3f792f38c6f16f3bc715d0d539477376b6","src/memchr/naive.rs":"c7453bc99cc4e58eb37cf5a50c88688833e50a270ee1849baefddb8acc0ccd94","src/memchr/x86/avx.rs":"3c2750174ce7ff033daa4096e7961bbee9a2da898068266b27dee22ef8cfddad","src/memchr/x86/mod.rs":"a642d5aefdb7452ead4ab7946b5c6cfb6cc6df636dcd0ebbd6f5e6e1ac8305c0","src/memchr/x86/sse2.rs":"79ede1aba71a655e86eb5873d682c5da26933bffa4fffd7042a2313f18cf4675","src/memchr/x86/sse42.rs":"de4c6f354dbfec170876cddb8d9157b35928f96ed2339a0c5d094cc953a2f52d","src/memmem/byte_frequencies.rs":"2fb85b381c038c1e44ce94294531cdcd339dca48b1e61f41455666e802cbbc9e","src/memmem/genericsimd.rs":"9ce7283db0994438eb6df2bea6ad984e80512b6f643ebae7ae7d82eb5d39fa11","src/memmem/mod.rs":"949fb8e11a23030d59b34fd8c7c196150f133e909a8448705c77a751c436907d","src/memmem/prefilter/fallback.rs":"d32248c41aa09701c2410c52f948bbe009dd1b13a01b444ce0fb8c4b4e404ede","src/memmem/prefilter/genericsimd.rs":"57d5523cf0299b37ef1dd1b351e3d387d5070f2f7ecffc9a9ca66528101ebd3f","src/memmem/prefilter/mod.rs":"ad8b4ac72c025f11d6b641c5fc0888468112758dcdc6bb72b43f932d2005ea4e","src/memmem/prefilter/wasm.rs":"14f684412fca35445a94760a6973d772dfd22d329ebae3b52b525d2a1f3acd63","src/memmem/prefilter/x86/avx.rs":"e344cae36a88b59c07a1c1d395edeb9c636a399e1528ce69b2bc7c94d8d8bb0b","src/memmem/prefilter/x86/mod.rs":"df2d84b23b22574383c281d33671a121b5faf7b1a48dd6f67c3085cd02cd4498","src/memmem/prefilter/x86/sse.rs":"daa648fc2a90d37299803a80d632e8a47a30ce8719d0ac2a2ea2cde3b30b6fef","src/memmem/rabinkarp.rs":"9b44eb092524a51792eba4deaca6c6d3cbc51db98cb548ea4fa7e5d8988cc71a","src/memmem/rarebytes.rs":"571082c71fc3dca5e4304171d41fb3c44e241df6dcd88bac4d7a15b52f9521e0","src/memmem/twoway.rs":"102f8bbb29696d5656cd2f5a1769a3af96d044fb09972881455cfb6424d6b50a","src/memmem/util.rs":"0194d40b912137e2352863af9cc1c0273baf97fdf6b27799628680846c06febd","src/memmem/vector.rs":"96e6f45f8ad11a822c4f18393839225d7f40f898ad657e109ba1b3288af0ef8f","src/memmem/wasm.rs":"87da03c964f054db30cc972d07a74e8902ec1248e2338ecd1dbac430f43fffc2","src/memmem/x86/avx.rs":"de85dbc415603c844baf94fbc92d676a738dd4b99246be468bd5f7be5921b25f","src/memmem/x86/mod.rs":"5012fca41b91caf229278aa221e8dd514ede497fe4938d64562d03fef2fc46e6","src/memmem/x86/sse.rs":"148a40c0952aca8b16d9eb3e724a5b9b60693bc7b2bcc5209bcc43c94faf560a","src/tests/memchr/iter.rs":"b68c7ecdb6222c5dbf61212e6863f78f98ad343868a74cb8612692fc790240b2","src/tests/memchr/memchr.rs":"09589c5899324c9b26ea4513c80389a2ffdf6ddc460031e2ca8da43bd493ae3f","src/tests/memchr/mod.rs":"29e0855f946c7babf603b3d610a29235a56a26a4c867fef0768542388eac4c95","src/tests/memchr/simple.rs":"b9997903ede972272c01c1750522a20692a28488cc7c5cf745ea83ff96d65fe3","src/tests/memchr/testdata.rs":"3e34377fe60eca3687d1ebc66127bd631af27ceaccc8f08806a293199b69a83f","src/tests/mod.rs":"9054a2a2f9af140f305ca29155d942fafbac9fb0874067611adc8a5990546be4","src/tests/x86_64-soft_float.json":"c0e416487fe9b4809534edb7db2a9eff3453dc40d9f1e23362c37f45a77ec717"},"package":"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"}
\ No newline at end of file
diff --git a/third_party/rust/memchr/Cargo.toml b/third_party/rust/memchr/Cargo.toml
index 630195281d86e..1dcac27a8b0d6 100644
--- a/third_party/rust/memchr/Cargo.toml
+++ b/third_party/rust/memchr/Cargo.toml
@@ -43,7 +43,7 @@ debug = true
 debug = true
 
 [profile.test]
-opt-level = 3
+opt-level = "z"
 debug = true
 
 [lib]
diff --git a/third_party/rust/regex/Cargo.toml b/third_party/rust/regex/Cargo.toml
index f4812c7f2804c..d038f1825d45d 100644
--- a/third_party/rust/regex/Cargo.toml
+++ b/third_party/rust/regex/Cargo.toml
@@ -45,14 +45,14 @@ rustdoc-args = [
 debug = 2
 
 [profile.dev]
-opt-level = 3
+opt-level = "z"
 debug = 2
 
 [profile.release]
 debug = 2
 
 [profile.test]
-opt-level = 3
+opt-level = "z"
 debug = 2
 
 [[test]]
diff --git a/third_party/rust/siphasher/Cargo.toml b/third_party/rust/siphasher/Cargo.toml
index 8ad6e50d7ded3..e831fb21f52ba 100644
--- a/third_party/rust/siphasher/Cargo.toml
+++ b/third_party/rust/siphasher/Cargo.toml
@@ -31,7 +31,7 @@ license = "MIT/Apache-2.0"
 repository = "https://github.com/jedisct1/rust-siphash"
 
 [profile.release]
-opt-level = 3
+opt-level = "z"
 lto = true
 panic = "abort"
 
-- 
2.39.2

